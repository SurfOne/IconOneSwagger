openapi: "3.0.3"
info:
  description: "Icon1 backend spec"
  version: "1.0.5"
  title: "Swagger spec"
servers:
  - url: "https://example.com"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: bearer
      bearerFormat: Basic

  schemas:
    Location:
      type: string
      example: "Guantanamo Bay"

    Timestamp:
      type: string
      format: date-time

    UserId:
      type: string
      example: "2cbcf0d5-79f8-4ca8-ba53-192fed1a5fe0"

    SensorId:
      type: string
      example: "41961612"

    Id:
      type: string
      example: "2024-10-21T14:51:22Z"

    User:
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/UserId"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "johndoe@example.com"
        distance_total:
          type: number
          example: 15.01
        max_y:
          type: number
          example: 3.13
        max_force:
          type: number
          example: 21.66
        fav_location:
          $ref: "#/components/schemas/Location"
        max_flow_state:
          type: number
          example: 12.95
        max_speed:
          type: number
          example: 26.2
        icon_points:
          type: integer
          example: 333

    Wave:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        video_id:
          $ref: "#/components/schemas/Id"
        max_speed:
          type: number
          example: 13.43
        max_force:
          type: number
          example: 21.62
        rating:
          type: string
          example: "Bad"
        distance_surfed:
          type: number
          example: 29.47
        max_vert:
          type: number
          example: 2.74
        max_flow_state:
          type: number
          example: 1.61

    Session:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        user_id:
          $ref: "#/components/schemas/UserId"
        sensor_id:
          $ref: "#/components/schemas/SensorId"
        dataframe_id:
          $ref: "#/components/schemas/SensorId"
        start_time:
          $ref: "#/components/schemas/Timestamp"
        duration:
          type: integer
          example: 3600000
        location:
          $ref: "#/components/schemas/Location"
        avg_rating:
          type: string
          example: "Good"
        distance_surfed:
          type: number
          example: 1200.5
        distance_paddled:
          type: number
          example: 354.2
        links:
          type: object
          properties:
            runs:
              type: string
              example: "/sessions/2024-10-21T14:51:22Z/runs"

    GeneralResponse:
      type: object
      properties:
        message:
          type: string
          example: "Success"
        data:
          type: string
          example: "Placeholder"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Success"
        data:
          type: object

    BadRequestResponse:
      type: object
      properties:
        message:
          type: string
          example: "Bad Request: The server could not understand the request due to invalid syntax."

    UnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Unauthorized: The client must authenticate itself to get the requested response."

    ForbiddenResponse:
      type: object
      properties:
        message:
          type: string
          example: "Forbidden: The client does not have access rights to the content."

    InternalServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Internal Server Error: The server has encountered a situation it doesn't know how to handle."

    PresignedUrlResponse:
      type: object
      properties:
        message:
          type: string
          example: "Success"
        data:
          type: string
          example: "https://<bucketname>.s3.amazonaws.com/<filepath>?<querystring>"

security:
  - BearerAuth: []

paths:
  /users:
    post:
      summary: Create a user
      security:
        - BasicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  properties:
                    customer:
                      type: object
                      properties:
                        first_name:
                          type: string
                          example: John
                        last_name:
                          type: string
                          example: Doe
                        email:
                          type: string
                          example: johndoe@example.com
                      additionalProperties: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/GeneralResponse'
                - properties:
                    data:
                      type: string
                      example: ""
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /users/{user_id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    put:
      summary: Update user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - properties:
                      data:
                        type: string
                        example: ""
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /users/{user_id}/get-upload-url:
    post:
      summary: Retrieve a temporary URL for uploading a session data file. Send a further PUT request to the generated URL along with the binary file as the request body, and the file is successfully uploaded.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          json:
            schema:
              type: object
              properties:
                file_id:
                  type: string
                  example: example-file.bin
                  description: File ID or name that is going to be used in the generated upload link. The ID cannot be changed after the link creation, and needs to be set here instead.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'


  /users/{user_id}/sessions:
    get:
      summary: Get list of sessions
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Session'
              examples:
                success:
                  value:
                    message: "Success"
                    data:
                      - id: "2024-10-21T14:51:22Z"
                        user_id: "2cbcf0d5-79f8-4ca8-ba53-192fed1a5fe0"
                        sensor_id: "41961612"
                        dataframe_id: "12345678"
                        start_time: "2024-10-21T14:51:22Z"
                        duration: 3600000
                        location: "Guantanamo Bay"
                        avg_rating: "Good"
                        distance_surfed: 1200.5
                        distance_paddled: 354.2
                        links:
                          runs: "/sessions/2024-10-21T14:51:22Z/runs"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /users/{user_id}/sessions/{session_id}:
    get:
      summary: Get session by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: session_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - properties:
                      data:
                        $ref: '#/components/schemas/Session'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /users/{user_id}/sessions/{session_id}/runs:
    get:
      summary: Get runs for session by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: session_id
          required: true
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Wave'
              examples:
                success:
                  value:
                    message: "Success"
                    data:
                      - id: "2cbcf0d5-79f8-4ca8-ba53-192fed1a5fe0"
                        video_id: "2024-10-21T14:51:22Z"
                        max_speed: 13.43
                        max_force: 21.62
                        rating: "Bad"
                        distance_surfed: 29.47
                        max_vert: 2.74
                        max_flow_state: 1.61

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /users/{user_id}/sessions/{session_id}/runs/{run_id}:
    get:
      summary: Get run by ID for a specific session
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: session_id
          required: true
          schema:
            type: string
        - in: path
          name: run_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - properties:
                      data:
                        $ref: '#/components/schemas/Wave'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

  /users{user_id}/sessions/{session_id}/runs/{run_id}/video:
    get:
      summary: Retrieve a temporary URL for downloading the rendered video for a run. Send a further GET request to the generated URL, and the file is downloaded.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: session_id
          required: true
          schema:
            type: string
        - in: path
          name: run_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    post:
      summary: Retrieve a temporary URL for uploading a video for a run. Send a further PUT request to the generated URL along with the video file as the request body, and the file is successfully uploaded.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: session_id
          required: true
          schema:
            type: string
        - in: path
          name: run_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: video
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

    delete:
      summary: Delete uploaded and rendered videos from a run
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
        - in: path
          name: session_id
          required: true
          schema:
            type: string
        - in: path
          name: run_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/GeneralResponse'
                  - properties:
                      data:
                        type: string
                        example: ""
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'


externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
